// pop argument 5
// RAM[ARG+5] = RAM[--SP]

// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[ARG+5]
@405
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop local 5
// RAM[LCL+5] = RAM[--SP]

// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[LCL+4]
@305
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop static 5
// RAM[Test.5] = RAM[--SP]

// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[Test.5]
@21
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop constant 5 (INVALID COMMAND)
=======================================================================
// pop this 5
// RAM[THIS+5] = RAM[--SP]

// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[THIS+5]
@3005
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop that 5
// RAM[THAT+5] = RAM[--SP]

// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[THAT+5]
@3015
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop pointer 1
// RAM[THIS] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[THIS]
@3010
M=D
// update stack pointer
@SP
M=M-1

// pop pointer 0
// pop this 0
// RAM[THAT] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[THAT]
@3000
M=D
// update stack pointer
@SP
M=M-1
=======================================================================
// pop temp 0
// RAM[5] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[5]
@5
M=D
// update stack pointer
@SP
M=M-1

// pop temp 1
// RAM[6] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[6]
@6
M=D
// update stack pointer
@SP
M=M-1

// pop temp 2
// RAM[7] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[7]
@7
M=D
// update stack pointer
@SP
M=M-1

// pop temp 3
// RAM[8] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[8]
@8
M=D
// update stack pointer
@SP
M=M-1

// pop temp 4
// RAM[9] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[9]
@9
M=D
// update stack pointer
@SP
M=M-1

// pop temp 5
// RAM[10] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[10]
@10
M=D
// update stack pointer
@SP
M=M-1

// pop temp 6
// RAM[11] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[11]
@11
M=D
// update stack pointer
@SP
M=M-1

// pop temp 7
// RAM[12] = RAM[--SP]
// get the value at RAM[--SP] saved it to d register
@SP
A=M-1
D=M
// store the value at RAM[--SP] into RAM[12]
@12
M=D
// update stack pointer
@SP
M=M-1
